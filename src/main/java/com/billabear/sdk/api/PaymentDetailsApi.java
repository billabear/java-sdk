/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.billabear.sdk.api;

import com.billabear.sdk.invoker.ApiCallback;
import com.billabear.sdk.invoker.ApiClient;
import com.billabear.sdk.invoker.ApiException;
import com.billabear.sdk.invoker.ApiResponse;
import com.billabear.sdk.invoker.Configuration;
import com.billabear.sdk.invoker.Pair;
import com.billabear.sdk.invoker.ProgressRequestBody;
import com.billabear.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.billabear.sdk.model.Error;
import com.billabear.sdk.model.FrontendToken;
import com.billabear.sdk.model.InlineResponse2007;
import com.billabear.sdk.model.PaymentDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentDetailsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public PaymentDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentDetailsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for completeFrontendPaymentDetails
     * @param body  (required)
     * @param customerId The id of the customer to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call completeFrontendPaymentDetailsCall(FrontendToken body, String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/customer/{customerId}/payment-methods/frontend-payment-token"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeFrontendPaymentDetailsValidateBeforeCall(FrontendToken body, String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling completeFrontendPaymentDetails(Async)");
        }
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling completeFrontendPaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = completeFrontendPaymentDetailsCall(body, customerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete Frontend Detail Collection
     * Complete frontend payment details
     * @param body  (required)
     * @param customerId The id of the customer to retrieve (required)
     * @return PaymentDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentDetails completeFrontendPaymentDetails(FrontendToken body, String customerId) throws ApiException {
        ApiResponse<PaymentDetails> resp = completeFrontendPaymentDetailsWithHttpInfo(body, customerId);
        return resp.getData();
    }

    /**
     * Complete Frontend Detail Collection
     * Complete frontend payment details
     * @param body  (required)
     * @param customerId The id of the customer to retrieve (required)
     * @return ApiResponse&lt;PaymentDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentDetails> completeFrontendPaymentDetailsWithHttpInfo(FrontendToken body, String customerId) throws ApiException {
        com.squareup.okhttp.Call call = completeFrontendPaymentDetailsValidateBeforeCall(body, customerId, null, null);
        Type localVarReturnType = new TypeToken<PaymentDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Complete Frontend Detail Collection (asynchronously)
     * Complete frontend payment details
     * @param body  (required)
     * @param customerId The id of the customer to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeFrontendPaymentDetailsAsync(FrontendToken body, String customerId, final ApiCallback<PaymentDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeFrontendPaymentDetailsValidateBeforeCall(body, customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePaymentDetails
     * @param paymentDetailsId The id of the payment details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePaymentDetailsCall(String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payment-methods/{paymentDetailsId}"
            .replaceAll("\\{" + "paymentDetailsId" + "\\}", apiClient.escapeString(paymentDetailsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePaymentDetailsValidateBeforeCall(String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentDetailsId' is set
        if (paymentDetailsId == null) {
            throw new ApiException("Missing the required parameter 'paymentDetailsId' when calling deletePaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePaymentDetailsCall(paymentDetailsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete
     * Delete Payment Details
     * @param paymentDetailsId The id of the payment details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePaymentDetails(String paymentDetailsId) throws ApiException {
        deletePaymentDetailsWithHttpInfo(paymentDetailsId);
    }

    /**
     * Delete
     * Delete Payment Details
     * @param paymentDetailsId The id of the payment details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePaymentDetailsWithHttpInfo(String paymentDetailsId) throws ApiException {
        com.squareup.okhttp.Call call = deletePaymentDetailsValidateBeforeCall(paymentDetailsId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete (asynchronously)
     * Delete Payment Details
     * @param paymentDetailsId The id of the payment details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePaymentDetailsAsync(String paymentDetailsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePaymentDetailsValidateBeforeCall(paymentDetailsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePaymentDetailsCustomer
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePaymentDetailsCustomerCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/customer/{customerId}/payment-methods/{paymentDetailsId}"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()))
            .replaceAll("\\{" + "paymentDetailsId" + "\\}", apiClient.escapeString(paymentDetailsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePaymentDetailsCustomerValidateBeforeCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deletePaymentDetailsCustomer(Async)");
        }
        // verify the required parameter 'paymentDetailsId' is set
        if (paymentDetailsId == null) {
            throw new ApiException("Missing the required parameter 'paymentDetailsId' when calling deletePaymentDetailsCustomer(Async)");
        }
        
        com.squareup.okhttp.Call call = deletePaymentDetailsCustomerCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete With Customer
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePaymentDetailsCustomer(String customerId, String paymentDetailsId) throws ApiException {
        deletePaymentDetailsCustomerWithHttpInfo(customerId, paymentDetailsId);
    }

    /**
     * Delete With Customer
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePaymentDetailsCustomerWithHttpInfo(String customerId, String paymentDetailsId) throws ApiException {
        com.squareup.okhttp.Call call = deletePaymentDetailsCustomerValidateBeforeCall(customerId, paymentDetailsId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete With Customer (asynchronously)
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePaymentDetailsCustomerAsync(String customerId, String paymentDetailsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePaymentDetailsCustomerValidateBeforeCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPaymentDetails
     * @param paymentDetailsId The id of the payment details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentDetailsCall(String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payment-methods/{paymentDetailsId}"
            .replaceAll("\\{" + "paymentDetailsId" + "\\}", apiClient.escapeString(paymentDetailsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentDetailsValidateBeforeCall(String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentDetailsId' is set
        if (paymentDetailsId == null) {
            throw new ApiException("Missing the required parameter 'paymentDetailsId' when calling getPaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getPaymentDetailsCall(paymentDetailsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch
     * Fetch the payment cards
     * @param paymentDetailsId The id of the payment details (required)
     * @return PaymentDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentDetails getPaymentDetails(String paymentDetailsId) throws ApiException {
        ApiResponse<PaymentDetails> resp = getPaymentDetailsWithHttpInfo(paymentDetailsId);
        return resp.getData();
    }

    /**
     * Fetch
     * Fetch the payment cards
     * @param paymentDetailsId The id of the payment details (required)
     * @return ApiResponse&lt;PaymentDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentDetails> getPaymentDetailsWithHttpInfo(String paymentDetailsId) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentDetailsValidateBeforeCall(paymentDetailsId, null, null);
        Type localVarReturnType = new TypeToken<PaymentDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch (asynchronously)
     * Fetch the payment cards
     * @param paymentDetailsId The id of the payment details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentDetailsAsync(String paymentDetailsId, final ApiCallback<PaymentDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentDetailsValidateBeforeCall(paymentDetailsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPaymentDetails
     * @param customerId The id of the customer to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPaymentDetailsCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/customer/{customerId}/payment-methods"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPaymentDetailsValidateBeforeCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling listPaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = listPaymentDetailsCall(customerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List Customer&#x27;s Payment Details
     * List all customers &lt;br&gt;&lt;br&gt;Added in version 1.1
     * @param customerId The id of the customer to retrieve (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2007 listPaymentDetails(String customerId) throws ApiException {
        ApiResponse<InlineResponse2007> resp = listPaymentDetailsWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * List Customer&#x27;s Payment Details
     * List all customers &lt;br&gt;&lt;br&gt;Added in version 1.1
     * @param customerId The id of the customer to retrieve (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2007> listPaymentDetailsWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = listPaymentDetailsValidateBeforeCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Customer&#x27;s Payment Details (asynchronously)
     * List all customers &lt;br&gt;&lt;br&gt;Added in version 1.1
     * @param customerId The id of the customer to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPaymentDetailsAsync(String customerId, final ApiCallback<InlineResponse2007> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPaymentDetailsValidateBeforeCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for makeDefaultPaymentDetails
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call makeDefaultPaymentDetailsCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payment-methods/{paymentDetailsId}/default"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()))
            .replaceAll("\\{" + "paymentDetailsId" + "\\}", apiClient.escapeString(paymentDetailsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call makeDefaultPaymentDetailsValidateBeforeCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling makeDefaultPaymentDetails(Async)");
        }
        // verify the required parameter 'paymentDetailsId' is set
        if (paymentDetailsId == null) {
            throw new ApiException("Missing the required parameter 'paymentDetailsId' when calling makeDefaultPaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Make Default
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void makeDefaultPaymentDetails(String customerId, String paymentDetailsId) throws ApiException {
        makeDefaultPaymentDetailsWithHttpInfo(customerId, paymentDetailsId);
    }

    /**
     * Make Default
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> makeDefaultPaymentDetailsWithHttpInfo(String customerId, String paymentDetailsId) throws ApiException {
        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsValidateBeforeCall(customerId, paymentDetailsId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Make Default (asynchronously)
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call makeDefaultPaymentDetailsAsync(String customerId, String paymentDetailsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsValidateBeforeCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for makeDefaultPaymentDetailsCustomer
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call makeDefaultPaymentDetailsCustomerCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/customer/{customerId}/payment-methods/{paymentDetailsId}/default"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()))
            .replaceAll("\\{" + "paymentDetailsId" + "\\}", apiClient.escapeString(paymentDetailsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call makeDefaultPaymentDetailsCustomerValidateBeforeCall(String customerId, String paymentDetailsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling makeDefaultPaymentDetailsCustomer(Async)");
        }
        // verify the required parameter 'paymentDetailsId' is set
        if (paymentDetailsId == null) {
            throw new ApiException("Missing the required parameter 'paymentDetailsId' when calling makeDefaultPaymentDetailsCustomer(Async)");
        }
        
        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsCustomerCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Make Default With Customer
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void makeDefaultPaymentDetailsCustomer(String customerId, String paymentDetailsId) throws ApiException {
        makeDefaultPaymentDetailsCustomerWithHttpInfo(customerId, paymentDetailsId);
    }

    /**
     * Make Default With Customer
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> makeDefaultPaymentDetailsCustomerWithHttpInfo(String customerId, String paymentDetailsId) throws ApiException {
        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsCustomerValidateBeforeCall(customerId, paymentDetailsId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Make Default With Customer (asynchronously)
     * Delete Payment Details
     * @param customerId The id of the customer to retrieve (required)
     * @param paymentDetailsId The id of the payment details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call makeDefaultPaymentDetailsCustomerAsync(String customerId, String paymentDetailsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = makeDefaultPaymentDetailsCustomerValidateBeforeCall(customerId, paymentDetailsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for startFrontendPaymentDetails
     * @param customerId The id of the customer to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startFrontendPaymentDetailsCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/customer/{customerId}/payment-methods/frontend-payment-token"
            .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startFrontendPaymentDetailsValidateBeforeCall(String customerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling startFrontendPaymentDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = startFrontendPaymentDetailsCall(customerId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start Frontend Detail Collection
     * Start frontend payment details
     * @param customerId The id of the customer to retrieve (required)
     * @return FrontendToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FrontendToken startFrontendPaymentDetails(String customerId) throws ApiException {
        ApiResponse<FrontendToken> resp = startFrontendPaymentDetailsWithHttpInfo(customerId);
        return resp.getData();
    }

    /**
     * Start Frontend Detail Collection
     * Start frontend payment details
     * @param customerId The id of the customer to retrieve (required)
     * @return ApiResponse&lt;FrontendToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FrontendToken> startFrontendPaymentDetailsWithHttpInfo(String customerId) throws ApiException {
        com.squareup.okhttp.Call call = startFrontendPaymentDetailsValidateBeforeCall(customerId, null, null);
        Type localVarReturnType = new TypeToken<FrontendToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start Frontend Detail Collection (asynchronously)
     * Start frontend payment details
     * @param customerId The id of the customer to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startFrontendPaymentDetailsAsync(String customerId, final ApiCallback<FrontendToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startFrontendPaymentDetailsValidateBeforeCall(customerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FrontendToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
