/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.billabear.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.billabear.sdk.model.BillingAdmin;
import com.billabear.sdk.model.Customer;
import com.billabear.sdk.model.Paths1paymentgetresponses200contentapplication1jsonschemapropertiesdataitems;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
/**
 * Refund
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-25T11:57:02.849979787Z[Etc/UTC]")

public class Refund {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("external_reference")
  private String externalReference = null;

  @SerializedName("comment")
  private String comment = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("started")
    STARTED("started"),
    @SerializedName("rejected")
    REJECTED("rejected"),
    @SerializedName("authorised")
    AUTHORISED("authorised"),
    @SerializedName("issued")
    ISSUED("issued");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("payment")
  private Paths1paymentgetresponses200contentapplication1jsonschemapropertiesdataitems payment = null;

  @SerializedName("customer")
  private Customer customer = null;

  @SerializedName("billing_admin")
  private BillingAdmin billingAdmin = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public Refund amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(example = "1000", description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public Refund currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Three-letter ISO currency code. Must be upper-case
   * @return currency
  **/
  @Schema(example = "EUR", description = "Three-letter ISO currency code. Must be upper-case")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public Refund externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * Get externalReference
   * @return externalReference
  **/
  @Schema(description = "")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public Refund comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(example = "Customer thought they cancelled but had not", description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public Refund status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Refund createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Refund payment(Paths1paymentgetresponses200contentapplication1jsonschemapropertiesdataitems payment) {
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @Schema(description = "")
  public Paths1paymentgetresponses200contentapplication1jsonschemapropertiesdataitems getPayment() {
    return payment;
  }

  public void setPayment(Paths1paymentgetresponses200contentapplication1jsonschemapropertiesdataitems payment) {
    this.payment = payment;
  }

  public Refund customer(Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @Schema(description = "")
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }

  public Refund billingAdmin(BillingAdmin billingAdmin) {
    this.billingAdmin = billingAdmin;
    return this;
  }

   /**
   * Get billingAdmin
   * @return billingAdmin
  **/
  @Schema(description = "")
  public BillingAdmin getBillingAdmin() {
    return billingAdmin;
  }

  public void setBillingAdmin(BillingAdmin billingAdmin) {
    this.billingAdmin = billingAdmin;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refund refund = (Refund) o;
    return Objects.equals(this.id, refund.id) &&
        Objects.equals(this.amount, refund.amount) &&
        Objects.equals(this.currency, refund.currency) &&
        Objects.equals(this.externalReference, refund.externalReference) &&
        Objects.equals(this.comment, refund.comment) &&
        Objects.equals(this.status, refund.status) &&
        Objects.equals(this.createdAt, refund.createdAt) &&
        Objects.equals(this.payment, refund.payment) &&
        Objects.equals(this.customer, refund.customer) &&
        Objects.equals(this.billingAdmin, refund.billingAdmin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, amount, currency, externalReference, comment, status, createdAt, payment, customer, billingAdmin);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refund {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    billingAdmin: ").append(toIndentedString(billingAdmin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
