/*
 * BillaBear
 * The REST API provided by BillaBear
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@billabear.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Metric;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.UUID;
/**
 * Price
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-17T11:40:00.098774036Z[Etc/UTC]")

public class Price {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("external_reference")
  private String externalReference = null;

  @SerializedName("recurring")
  private Boolean recurring = null;

  /**
   * Required if recurring is true
   */
  @JsonAdapter(ScheduleEnum.Adapter.class)
  public enum ScheduleEnum {
    @SerializedName("week")
    WEEK("week"),
    @SerializedName("month")
    MONTH("month"),
    @SerializedName("year")
    YEAR("year"),
    @SerializedName("one-off")
    ONE_OFF("one-off");

    private String value;

    ScheduleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScheduleEnum fromValue(String input) {
      for (ScheduleEnum b : ScheduleEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScheduleEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScheduleEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("schedule")
  private ScheduleEnum schedule = null;

  @SerializedName("including_tax")
  private Boolean includingTax = null;

  @SerializedName("public")
  private Boolean _public = null;

  @SerializedName("metric")
  private Metric metric = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public UUID getId() {
    return id;
  }

  public Price amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(example = "1000", required = true, description = "")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public Price currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Three-letter ISO currency code. Must be upper-case
   * @return currency
  **/
  @Schema(example = "EUR", required = true, description = "Three-letter ISO currency code. Must be upper-case")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public Price externalReference(String externalReference) {
    this.externalReference = externalReference;
    return this;
  }

   /**
   * Get externalReference
   * @return externalReference
  **/
  @Schema(description = "")
  public String getExternalReference() {
    return externalReference;
  }

  public void setExternalReference(String externalReference) {
    this.externalReference = externalReference;
  }

  public Price recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Get recurring
   * @return recurring
  **/
  @Schema(example = "false", required = true, description = "")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

  public Price schedule(ScheduleEnum schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Required if recurring is true
   * @return schedule
  **/
  @Schema(description = "Required if recurring is true")
  public ScheduleEnum getSchedule() {
    return schedule;
  }

  public void setSchedule(ScheduleEnum schedule) {
    this.schedule = schedule;
  }

  public Price includingTax(Boolean includingTax) {
    this.includingTax = includingTax;
    return this;
  }

   /**
   * If the price is including tax. If false tax will be added on top of the price.
   * @return includingTax
  **/
  @Schema(description = "If the price is including tax. If false tax will be added on top of the price.")
  public Boolean isIncludingTax() {
    return includingTax;
  }

  public void setIncludingTax(Boolean includingTax) {
    this.includingTax = includingTax;
  }

  public Price _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @Schema(description = "")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  public Price metric(Metric metric) {
    this.metric = metric;
    return this;
  }

   /**
   * Get metric
   * @return metric
  **/
  @Schema(description = "")
  public Metric getMetric() {
    return metric;
  }

  public void setMetric(Metric metric) {
    this.metric = metric;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Price price = (Price) o;
    return Objects.equals(this.id, price.id) &&
        Objects.equals(this.amount, price.amount) &&
        Objects.equals(this.currency, price.currency) &&
        Objects.equals(this.externalReference, price.externalReference) &&
        Objects.equals(this.recurring, price.recurring) &&
        Objects.equals(this.schedule, price.schedule) &&
        Objects.equals(this.includingTax, price.includingTax) &&
        Objects.equals(this._public, price._public) &&
        Objects.equals(this.metric, price.metric);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, amount, currency, externalReference, recurring, schedule, includingTax, _public, metric);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Price {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    externalReference: ").append(toIndentedString(externalReference)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    includingTax: ").append(toIndentedString(includingTax)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
